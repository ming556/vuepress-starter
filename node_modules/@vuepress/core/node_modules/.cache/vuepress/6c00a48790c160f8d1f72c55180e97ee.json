{"remainingRequest":"D:\\项目\\My_project\\vuepress-starter\\vuepress-starter\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!D:\\项目\\My_project\\vuepress-starter\\vuepress-starter\\node_modules\\ejs\\lib\\ejs.js","dependencies":[{"path":"D:\\项目\\My_project\\vuepress-starter\\vuepress-starter\\node_modules\\ejs\\lib\\ejs.js","mtime":1591948923040},{"path":"D:\\项目\\My_project\\vuepress-starter\\vuepress-starter\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591862511060},{"path":"D:\\项目\\My_project\\vuepress-starter\\vuepress-starter\\node_modules\\babel-loader\\lib\\index.js","mtime":1591862511204}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}